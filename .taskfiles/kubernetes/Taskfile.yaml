---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  KUBECONFORM_SCRIPT: '{{.ROOT_DIR}}/.taskfiles/template/resources/kubeconform.sh'
  TIMENOW:
    sh: date +%Y%m%d-%H%M%S

tasks:

  kubeconform:
    desc: Validate Kubernetes manifests with kubeconform
    cmd: bash {{.KUBECONFORM_SCRIPT}} {{.KUBERNETES_DIR}}
    preconditions:
      - test -f {{.KUBECONFORM_SCRIPT}}
      - which kubeconform

  resources:
    desc: Gather common resources in your cluster, useful when asking for support
    cmds:
      - for: { var: RESOURCE }
        cmd: kubectl get {{.ITEM}} {{.CLI_ARGS | default "-A"}}
    vars:
      RESOURCE: >-
        nodes
        gitrepositories
        kustomizations
        helmrepositories
        helmreleases
        certificates
        certificaterequests
        ingresses
        pods
    preconditions:
      - test -f {{.KUBECONFIG}}
      - which kubectl

  iperf2:
    desc: Start a iperf2 server on one node, and iperf2 client on another node, to benchmark network performance.
    dir: "/{{.ROOT_DIR}}/.taskfiles/kubernetes/template/iperf"
    vars: &iperf2-vars
      SERVER_NAME: &iperf2-server-name "iperf2-server-{{- .TIMENOW -}}"
      SERVER_NS: &iperf2-server-ns '{{ .SERVER_NS | default "default" }}'
      CLIENT_NAME: &iperf2-client-name "iperf2-client-{{- .TIMENOW -}}"
      CLIENT_NS: &iperf2-client-ns '{{ .CLIENT_NS | default "default" }}'
      CLUSTER_DOMAIN: '{{ .CLUSTER_DOMAIN | default "cluster.local" }}'
      SERVER_PORT: '{{ .SERVER_PORT | default "5001" }}'
      SERVER_NODE: '{{ or .SERVER_NODE (fail "Missing `SERVER_NODE` environment variable!") }}'
      CLIENT_NODE: '{{ or .CLIENT_NODE (fail "Missing `CLIENT_NODE` environment variable!") }}'
      SERVER_ARGS: '{{ .SERVER_ARGS | default "" }}'
      CLIENT_ARGS: '{{ .CLIENT_ARGS | default "" }}'
    env: *iperf2-vars
    cmds:
      - cat ./server.yaml | envsubst | kubectl apply -f -
      - defer: cat ./server.yaml | envsubst | kubectl delete -f -
      - task: wait-pod-ready
        vars:
          NAME: "-l job-name={{.SERVER_NAME}}"
          NS: "{{.SERVER_NS}}"
      - cat ./client.yaml | envsubst | kubectl apply -f -
      - defer: cat ./client.yaml | envsubst | kubectl delete -f -
      - task: wait-finish
        vars:
          NAME: "{{.CLIENT_NAME}}"
          NS: "{{.CLIENT_NS}}"

  wait-pod-pending:
    aliases: [waitp]
    internal: true
    desc: Wait for a job's pod to change its status to pending
    vars:
      NAME: &name-fail '{{ or .NAME (fail "Missing `NAME` environment variable!") }}'
      NS: &ns-fail '{{ or .NS (fail "Missing `NS` environment variable!") }}'
    cmds:
      - |
        until [[ $(kubectl -n {{.NS}} get pod {{.NAME}} -o jsonpath='{.items[*].status.phase}') == "Pending" ]]; do sleep 1; done

  wait-pod-running:
    aliases: [waitr]
    internal: true
    desc: "Wait for a job's pod to change its status to running"
    vars:
      NAME: *name-fail
      NS: *ns-fail
    cmds:
      - until [[ $(kubectl -n {{.NS}} get pod {{.NAME}} -o jsonpath='{.items[*].status.phase}') == "Running" ]]; do sleep 1; done

  wait-pod-running-v2:
    internal: true
    desc: Wait for a job's pod to change its status to running
    vars:
      NAME: *name-fail
      NS: *ns-fail
    cmds:
      - |
        until kubectl wait pod -n {{.NS}} {{.NAME}} --for-jsonpath='{.items[*].status.phase}'=Running --timeout=-; do sleep 1; done

  wait-pod-ready:
    internal: true
    desc: Wait for a pod to be ready
    vars:
      NAME: *name-fail
      NS: *ns-fail
    cmds:
      - until kubectl wait pod -n {{.NS}} {{.NAME}} --for=condition=Ready --timeout=1h; do sleep 1; done

  wait-pod-delete:
    aliases: [waitd]
    internal: true
    desc: Wait for a job's pod to delete
    vars:
      NAME: *name-fail
      NS: *ns-fail
    cmds:
      - until kubectl wait pod -n {{.NS}} {{.NAME}} --for delete --timeout=1m; do sleep 1; done

  wait-finish:
    internal: true
    desc: Wait for a job's pod to change its status to pending
    vars:
      NAME: *name-fail
      NS: *ns-fail
      TYPE: '{{ .TYPE | default "job" }}'
      # WAIT_ARGS: '{{.WAIT_ARGS | default "echo \"{{.NAME}} is still running, logs:\" && kubectl -n {{.NS}} logs {{.NAME}} --since 2s -f;"}}'
    cmds:
      - |-
        until kubectl -n {{.NS}} wait {{.TYPE}}/{{.NAME}} --for condition=complete --timeout=2s; do
          echo "{{.NAME}} is still running, logs:" && kubectl -n {{.NS}} logs {{.TYPE}}/{{.NAME}} --since 2s -f || true;
        done
